<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        gg==
</value>
  </data>
</root>